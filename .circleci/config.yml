# Check https://circleci.com/docs/2.0/language-elixir/ for more details on CircleCI configuration
version: 2.1
commands:
  setup-sccache:
    steps:
      - run:
          name: Install sccache
          command: |
            source $HOME/.cargo/env
            cargo install sccache
            # This configures Rust to use sccache.
            echo 'export "RUSTC_WRAPPER"="sccache"' >> $BASH_ENV
            # This is the maximum space sccache cache will use on disk.
            echo 'export "SCCACHE_CACHE_SIZE"="1G"' >> $BASH_ENV
            sccache --version
  restore-sccache-cache:
    steps:
      - restore_cache:
          name: Restore sccache cache
          key: sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}
  save-sccache-cache:
    steps:
      - save_cache:
          name: Save sccache cache
          # We use {{ epoch }} to always upload a fresh cache:
          # Of course, restore_cache will not find this exact key,
          # but it will fall back to the closest key (aka the most recent).
          # See https://discuss.circleci.com/t/add-mechanism-to-update-existing-cache-key/9014/13
          key: sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ epoch }}
          paths:
            - "~/.cache/sccache"
jobs:
  build:
    parallelism: 1
    docker:
      - image: circleci/elixir:1.9.1
        environment:
          MIX_ENV: test

    working_directory: ~/repo
    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependency-cache-{{ checksum "mix.lock" }}
            - v1-dependency-cache

      - run: mix local.hex --force # install Hex locally (without prompt)
      - run: mix local.rebar --force # fetch a copy of rebar (without prompt)
      - run:
          name: "Install Rust"
          command: |
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain stable -y
            source $HOME/.cargo/env
            rustup component add rustfmt
            rustup component add clippy
            rustup target add wasm32-unknown-unknown # to compile our example WASM files for testing
      - setup-sccache
      - restore-sccache-cache

      - run:
          name: "Run Checks (Tests, Formatters, ..)"
          command: |
            source $HOME/.cargo/env
            mix deps.get
            mix test
            mix format --check-formatted
            cargo fmt --manifest-path native/wasmex/Cargo.toml  -- --check
            touch ./native/wasmex/src/lib.rs  && cargo clippy --manifest-path native/wasmex/Cargo.toml --all-targets --all-features -- -D warnings
            mix dialyzer --plt
            mix dialyzer
            mix credo
            mix docs

      - save_cache:
          key: v1-dependency-cache-{{ checksum "mix.lock" }}
          paths:
            - _build
            - deps
            - ~/.mix

      - save-sccache-cache

      - store_test_results:
          path: _build/test/lib/wasmex
